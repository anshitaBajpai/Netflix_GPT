{"version":3,"file":"static/js/870.1d39e055.chunk.js","mappings":"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","sources":["hooks/usePlayer.js","pages/Watch.js","stores/playerSlice.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { TMDB_API_URL, TMDB_OPTIONS } from \"../services/tmdb\";\r\nimport { setPlayer } from '../stores/playerSlice';\r\n\r\nconst usePlayer = (endpoint, playerState, contentId) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${TMDB_API_URL}/${endpoint}/${contentId}?language=en-US`, TMDB_OPTIONS);\r\n        const media = await response.json();\r\n        if (!media) return null;\r\n\r\n        const { success, status_message } = media;\r\n        if (success === false) return status_message;\r\n\r\n        const videoResponse = await fetch(`${TMDB_API_URL}/movie/${media.id}/videos?language=en-US&page=1`, TMDB_OPTIONS);\r\n        const videoResult = await videoResponse.json();\r\n\r\n        const mediaResult = {\r\n          info: media,\r\n          videos: videoResult\r\n        };\r\n        dispatch(setPlayer({ playerState, playerData: mediaResult }));\r\n        return mediaResult;\r\n      } catch (error) {\r\n        console.error('Error fetching movies:', error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [dispatch, endpoint, playerState, contentId]);\r\n}\r\n\r\nexport default usePlayer;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport usePlayer from \"../hooks/usePlayer\";\r\nimport { TMDB_CDN_URL } from \"../services/tmdb\";\r\nimport { PAGE } from \"../router/routes\";\r\nimport { useEffect } from \"react\";\r\nimport { setPlayer } from \"../stores/playerSlice\";\r\nimport Spinner from '../components/Spinner';\r\n\r\nconst Watch = () => {\r\n  const { contentId } = useParams();\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(setPlayer({ playerState: 'playing', playerData: null }))\r\n    }\r\n  }, [])\r\n\r\n  usePlayer('movie', 'playing', contentId);\r\n\r\n  const videoInfo = useSelector((store) => store?.player?.playing?.info)\r\n  const videos = useSelector((store) => store?.player?.playing?.videos)\r\n\r\n  if (!videoInfo && !videos) return <Spinner />;\r\n  const { original_title, backdrop_path } = videoInfo;\r\n\r\n  if (videos?.results?.length <= 0) return <VideoNotFound data={{ original_title, backdrop_path }} />;\r\n\r\n  const { key } = videos.results[0];\r\n  if (!key) return;\r\n\r\n  return (\r\n    <div className=\"h-screen w-screen\">\r\n      <iframe className=\"h-[416px] md:h-[calc(100%-0px)] w-full pt-[118px] md:pt-[70px]\"\r\n        src={`https://www.youtube.com/embed/${key}?autoplay=1&mute=0&controls=1&showinfo=0&rel=0&iv_load_policy=3&modestbranding=0`}\r\n        title=\"YouTube video player\"\r\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n        allowFullScreen>\r\n      </iframe>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst VideoNotFound = ({ data }) => {\r\n  const { backdrop_path, original_title, message } = data;\r\n  return (\r\n    <div className='w-screen h-screen'>\r\n      <div className='w-full h-full'>\r\n        <img src={`${TMDB_CDN_URL}/w500${backdrop_path}`} alt={original_title} className='w-full h-full object-cover' />\r\n      </div>\r\n      <div className='absolute w-full h-full bg-black/70 top-0 bottom-0 left-0 right-0 flex flex-col justify-center items-center'>\r\n        <h1 className='text-white text-5xl text-bold mb-5'>{original_title}</h1>\r\n        <p className=' text-gray-300 text-2xl mb-4'>Video not available for <b>{original_title}</b></p>\r\n        <Link to={PAGE.BROWSE} className=\"bg-red-primary px-12 py-3 text-white rounded flex items-center gap-3\">\r\n          <span className=\"icon-fill text-[36px]\">west</span>\r\n          <span>Home Page</span>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Watch;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst playerSlice = createSlice({\r\n  name: 'player',\r\n  initialState: {\r\n    playing: null\r\n  },\r\n\r\n  reducers: {\r\n    setPlayer: (state, action) => {\r\n      const { playerState, playerData } = action.payload;\r\n      state[playerState] = playerData;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setPlayer } = playerSlice.actions;\r\nexport default playerSlice.reducer;\r\n"],"names":["usePlayer","endpoint","playerState","contentId","dispatch","useDispatch","useEffect","async","response","fetch","concat","TMDB_API_URL","TMDB_OPTIONS","media","json","success","status_message","videoResponse","id","mediaResult","info","videos","setPlayer","playerData","error","console","fetchData","VideoNotFound","_ref","data","backdrop_path","original_title","message","_jsxs","className","children","_jsx","src","TMDB_CDN_URL","alt","Link","to","PAGE","BROWSE","Watch","_videos$results","useParams","videoInfo","useSelector","store","_store$player","_store$player$playing","player","playing","_store$player2","_store$player2$playin","Spinner","results","length","key","title","allow","allowFullScreen","playerSlice","createSlice","name","initialState","reducers","state","action","payload","actions"],"sourceRoot":""}