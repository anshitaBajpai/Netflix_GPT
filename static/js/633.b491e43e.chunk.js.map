{"version":3,"file":"static/js/633.b491e43e.chunk.js","mappings":"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","sources":["components/SearchResult.js","services/api.js","../node_modules/@mui/icons-material/esm/Close.js","components/GptSearchBar.js","pages/Search.js","stores/searchSlice.js","../node_modules/@mui/icons-material/esm/SearchOutlined.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport MovieSlider from \"./MovieSlider\";\r\n\r\nconst SearchResult = () => {\r\n  const { gptResults, movies } = useSelector((store) => store.search);\r\n  if (!gptResults) return null;\r\n\r\n  return (\r\n    <>\r\n      {gptResults.map((title, index) =>\r\n        movies && movies[index] && movies[index].results && movies[index].results.length > 0 ? (\r\n          <MovieSlider key={title} heading={title} data={movies[index]} />\r\n        ) : null\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchResult\r\n","const API_URL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:5000\";\r\n\r\nexport const getGptResponse = async (prompt) => {\r\n  const response = await fetch(`${API_URL}/api/gpt`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ prompt }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch response from backend\");\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import { useState } from \"react\";\r\nimport { getGptResponse } from \"../services/api\";\r\nimport { TMDB_API_URL, TMDB_OPTIONS } from \"../services/tmdb\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setGptSearch } from \"../stores/searchSlice\";\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst GptSearchBar = ({ searchOpacity }) => {\r\n  const userEmail = useSelector((store) => store?.user?.email);\r\n  const [user] = useState(userEmail);\r\n  const [loadingBtn, setLoadingBtn] = useState(false);\r\n  const [searchPrompt, setSearchPrompt] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const handlePrompt = (event) => {\r\n    setSearchPrompt(event.target.value);\r\n  };\r\n\r\n  const handleClearPrompt = () => {\r\n    setSearchPrompt('');\r\n  };\r\n\r\n  const searchMovies = async (endpoint, query) => {\r\n    try {\r\n      const response = await fetch(\r\n        `${TMDB_API_URL}/search/${endpoint}?query=${encodeURIComponent(query)}&language=en-US&page=1`,\r\n        TMDB_OPTIONS\r\n      );\r\n      const results = await response.json();\r\n      return results;\r\n    } catch (error) {\r\n      console.error('Error fetching movies:', error);\r\n      return { results: [] };\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!searchPrompt) return;\r\n    setLoadingBtn(true);\r\n\r\n    try {\r\n      // Step 1: Ask GPT if it's a single movie or a list query\r\n      const classifyPrompt = `\r\n        Tell me if this query is asking for a single movie or multiple movies: \"${searchPrompt}\".\r\n        Respond with only \"single\" or \"multiple\".\r\n      `;\r\n\r\n  const classifyData = await getGptResponse(classifyPrompt);\r\n  const type = classifyData?.reply?.toLowerCase().trim();\r\n\r\n      if (type === \"single\") {\r\n        // Step 2a: Correct / Normalize the movie name\r\n        const correctionPrompt = `\r\n          The user entered: \"${searchPrompt}\".\r\n          Correct the name if it has spelling mistakes or is incomplete.\r\n          Reply with only the corrected official movie title.\r\n        `;\r\n\r\n  const correctionData = await getGptResponse(correctionPrompt);\r\n  const correctedMovie = correctionData?.reply?.trim();\r\n\r\n        // Step 3a: Search TMDB for only this corrected movie\r\n        const res = await searchMovies(\"movie\", correctedMovie);\r\n        const exactMatch = res?.results?.filter(\r\n          (movie) => movie.title.toLowerCase() === correctedMovie.toLowerCase() && movie.poster_path\r\n        );\r\n\r\n        dispatch(setGptSearch({ searchResults: [correctedMovie], actionType: 'gptResults' }));\r\n        dispatch(setGptSearch({ searchResults: [{ results: exactMatch.slice(0, 1) }], actionType: 'movies' }));\r\n      } else {\r\n        // Step 2b: Ask GPT for multiple movie suggestions\r\n        const prompt = `\r\n          Act as a movie recommendation system and suggest some movies for the query: ${searchPrompt}.\r\n          Only give me names of up to 5 movies, comma separated.\r\n          Example: Spider Man, Elemental, Phir Hera Pheri\r\n        `;\r\n\r\n  const gptData = await getGptResponse(prompt);\r\n  const gptResults = gptData?.reply?.split(\", \");\r\n\r\n        // Fetch movies for each GPT-suggested title\r\n        const data = await Promise.all(\r\n          gptResults.map(async (title) => {\r\n            const res = await searchMovies('movie', title);\r\n            if (res?.results) {\r\n              const exactMatch = res.results.filter(\r\n                (movie) => movie.title.toLowerCase() === title.toLowerCase() && movie.poster_path\r\n              );\r\n              return { ...res, results: exactMatch.slice(0, 5) };\r\n            }\r\n            return { results: [] };\r\n          })\r\n        );\r\n\r\n        dispatch(setGptSearch({ searchResults: gptResults, actionType: 'gptResults' }));\r\n        dispatch(setGptSearch({ searchResults: data, actionType: 'movies' }));\r\n      }\r\n\r\n      setLoadingBtn(false);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setLoadingBtn(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"px-4 md:px-12 py-3 text-white max-w-4xl text-center m-auto mt-12\">\r\n        <h1 className=\"text-3xl md:text-5xl mb-3 font-bold\">Let AI be your Movie Guru!</h1>\r\n      </div>\r\n      <div\r\n        className=\"px-4 md:px-12 py-3 sticky top-[68px] z-[99999]\"\r\n        style={{ background: `rgba(20, 20, 20, ${searchOpacity})` }}\r\n      >\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n          <div className=\"flex gap-1\">\r\n            <div className=\"text-white relative w-full\">\r\n              <span className=\"icon-fill text-gray-400 text-[22px] md:mt-0 md:text-[36px] absolute left-4 top-[16px] md:top-5 hidden md:block\">\r\n                <SearchOutlinedIcon style={{ fontSize: \"32px\" }} />\r\n              </span>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search Movies, Show and more\"\r\n                className={`py-4 md:py-6 pl-4 pr-12 md:px-14 w-full bg-gray-600 bg-opacity-70 rounded focus:bg-opacity-100 focus-visible:outline-none text-lg`}\r\n                onChange={handlePrompt}\r\n                value={searchPrompt}\r\n              />\r\n\r\n              {searchPrompt && (\r\n                <span\r\n                  className=\"icon-fill text-[28px] mt-0 md:text-[36px] absolute right-4 top-4 md:top-5 cursor-pointer\"\r\n                  onClick={handleClearPrompt}\r\n                >\r\n                  <CloseIcon style={{ fontSize: \"32px\" }} />\r\n                </span>\r\n              )}\r\n            </div>\r\n            <button\r\n              className={`py-4 md:py-6 w-24 px-2 md:px-5 flex items-center justify-center bg-red-primary rounded text-white disabled:bg-red-800`}\r\n              onClick={handleSearch}\r\n              disabled={searchPrompt === \"\"}\r\n            >\r\n              {loadingBtn ? (\r\n                <div className=\"w-5 h-5 border-t m border-gray-300 border-solid rounded-full animate-spin\"></div>\r\n              ) : (\r\n                <>\r\n                  <span className=\"icon-fill text-[22px] md:text-[32px] md:hidden\">\r\n                    <SearchOutlinedIcon style={{ fontSize: \"28px\" }} />\r\n                  </span>\r\n                  <span className=\"hidden md:inline-block\">Search</span>\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GptSearchBar;\r\n","import SearchResult from \"../components/SearchResult\";\r\nimport { useEffect, useState } from \"react\";\r\nimport GptSearchBar from \"../components/GptSearchBar\";\r\n\r\nconst Search = () => {\r\n  const [skinOpacity, setSkinOpacity] = useState(1);\r\n  const [searchOpacity, setSearchOpacity] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const scrollPosition = window.scrollY;\r\n    const threshold = 70;\r\n\r\n    if (scrollPosition < threshold) {\r\n      setSkinOpacity(1 - scrollPosition / threshold);\r\n    } else {\r\n      setSkinOpacity(0);\r\n    }\r\n\r\n    if (skinOpacity === 0) {\r\n      setSearchOpacity(1);\r\n    } else {\r\n      setSearchOpacity(0);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [skinOpacity]);\r\n\r\n  return (\r\n    <div className=\"search-page\">\r\n      <div className={`bg-skin w-full h-[430px] absolute top-0 -z-0 bg-gradient-to-b from-indigo-800 to-[#141414] transition-colors`} style={{ opacity: `${skinOpacity}` }}></div>\r\n      <div className=\"search relative\">\r\n        <GptSearchBar searchOpacity={searchOpacity} />\r\n        <div className=\"mt-3 px-4 md:px-12 py-3 min-h-[700px]\">\r\n          <SearchResult />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Search;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState: {\r\n    gptResults: null,\r\n    movies: null,\r\n    shows: null,\r\n  },\r\n  reducers: {\r\n    setGptSearch: (state, action) => {\r\n      const { actionType, searchResults } = action.payload\r\n      state[actionType] = searchResults;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setGptSearch } = searchSlice.actions;\r\nexport default searchSlice.reducer;\r\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'SearchOutlined');"],"names":["SearchResult","gptResults","movies","useSelector","store","search","_jsx","_Fragment","children","map","title","index","results","length","MovieSlider","heading","data","API_URL","process","REACT_APP_BACKEND_URL","getGptResponse","async","response","fetch","concat","method","headers","body","JSON","stringify","prompt","ok","Error","json","createSvgIcon","d","_ref","searchOpacity","userEmail","_store$user","user","email","useState","loadingBtn","setLoadingBtn","searchPrompt","setSearchPrompt","dispatch","useDispatch","searchMovies","endpoint","query","TMDB_API_URL","encodeURIComponent","TMDB_OPTIONS","error","console","_jsxs","className","style","background","onSubmit","e","preventDefault","SearchOutlinedIcon","fontSize","type","placeholder","onChange","event","target","value","onClick","handleClearPrompt","CloseIcon","_classifyData$reply","classifyPrompt","classifyData","reply","toLowerCase","trim","_correctionData$reply","_res$results","correctionPrompt","correctionData","correctedMovie","res","exactMatch","filter","movie","poster_path","setGptSearch","searchResults","actionType","slice","_gptData$reply","gptData","split","Promise","all","_objectSpread","disabled","Search","skinOpacity","setSkinOpacity","setSearchOpacity","handleScroll","scrollPosition","window","scrollY","useEffect","addEventListener","removeEventListener","opacity","GptSearchBar","searchSlice","createSlice","name","initialState","shows","reducers","state","action","payload","actions"],"sourceRoot":""}